1. 뭐부터 만들지 
2. 일정


1.케릭터 이동 (조작), 3인칭 카메라 
-케릭터 구현(리소스 부제)
-케릭터의 조작, 점프 구현(O)
-3인칭 카메라 구현 (O)
-앉기, 눕기 구현(리소스 부제로 앉기와 눕기 기능 추후에 입력 )

2.총 시스템 (총쏘는것, 장전, 줌기능, 맞은 곳에 대한 이펙트)
-총기 구현(리소스 부제)
-슈팅 기능(  )
-줌 기능(  )
-맞은 곳에 대한 이펙트( 리소스 부제 )
-장착물에 대한 슈팅기능 변화(  )

3.UI(플레이어 체럭, 미니맵, 총의 간략한 정보(탄소모량, 남은 탄량), 착용하고 있는 장비)
-미니맵 (  )
-플레이어 체력 (  )
-총의 간략 정보 (  )
--총기모양(  )
--탄의 수량(  )
-착용장비 (  )

4.인벤토리
-땅에 있는 오브젝트 구별(  )
-플레이어가 가지고 있는 오브젝트(  )
-플레이어가 착용중 오브젝트(  )
-플레이어 외형(  )
5.적(단순 가만히 서서 단방향으로 총을 쏘는 기계)

6.맵(오브젝트 배치)
- 언덕(오브젝트)
- 상자(오브젝트)
- 구조물(오브젝트)

#세분화




1-1
케릭터가 있으면 마우스를 아무리 돌려도 케릭터의 일부는 나와야함
방법
1. 케릭터의 자식으로 카메라를 두는 것
좌우로는 상관 없지만 상하가 되면 카메라가 바닥을 뚧게됨
해결방법
전에 했던 행성의 공전과 자전을 이용하는 방법
케릭터 자식으로 케릭터 머리위치에 빈 게임 오브젝트 생성(안보이는)
boxman오브젝트 의 자식으로 빈 게임 오브젝트를 두면 boxman의 오브젝트가 움직일때 같이 움직이게 됨으로
charcter오브젝트를 만들어 boxman오브젝트와 빈 게임 오브젝트의 부모 오브젝트로 둔다.
카메라의 경우 
실행시 회전의 제한이 없으면 뒤집어지는 경우가 발생한다.

1-2
이동 방향은 카메라의 정면을 기준으로 한다.
카메라의 오른쪽도 평면화 시켜 저장한다.
만든 lookforward와 lookRight에 moveinput을 곱해서 더하면 바라보고 있는 방향을 기준으로 이동 방향을 구할 수 있다.
이동 방향에 시간과 이동속도를 곱해서 transform.position에 더해주면 이동한 위치를 구할 수 있다.

1-3 이동중 케릭터가 이동 할 때 카메라가 바라보는 방향을 바라보게하는 방법

시네머신으로 TPS 만들기
https://www.youtube.com/watch?v=dqfVlSxOXv8
//시네머신으로 3인칭 컨트롤러 찾아볼것



RaycastAll은 접촉된 모든 개체의 정보를 얻어옴(수류탄이 터진 경우 피격범위의 모든 개체의 정보를 얻어 처리할때)


플레이어 함수
움직임 제어를 위한 Rigidbody
기본 스피드 변수
coroutine 변수

Game Manager에서 사용할 케릭터의 위치 Vector3 position; 프로퍼티
rigid.position를 리턴한다.

살아있는지 확인하기 위한 isLive프로퍼티로 만들어 


캐릭터가 보는 방향을 카메라로 볼수 있도록(케릭터의 뒤통수)
확인을 위해 캡슐의 정면에 상자 두개 배치

캡슐로 케릭터 만든후 캡슐의 이동

게임매니저(싱글톤 패턴)




마지막
맵과 레벨구현
더미(박스, 캡슐)로 지형지물로 가장 간단하게 맵을 만들면됨 
박스나 캡슐들을 리소스로 갈아끼우는것


리소스폴더에 리소스 넣고

월드와 모델 등록

모델에 콜리더 추가

PackageManager로 
input system
Cinemachine
설치

맵 구현

UI구현


플레이어 이동

플레이어 구현


총기 구현

사격 구현

피격 구현



함수 
StartGame()
-모든 값을 초기화해준 뒤 모든 함수를 실행해야함